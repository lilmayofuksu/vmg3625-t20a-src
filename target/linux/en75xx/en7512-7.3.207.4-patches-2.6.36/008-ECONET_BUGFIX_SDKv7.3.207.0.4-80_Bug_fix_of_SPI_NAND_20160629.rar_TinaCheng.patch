Index: linux-2.6.36/drivers/mtd/chips/spi_nand_flash.c
===================================================================
--- linux-2.6.36.orig/drivers/mtd/chips/spi_nand_flash.c	2016-07-20 10:43:49.071613466 +0800
+++ linux-2.6.36/drivers/mtd/chips/spi_nand_flash.c	2016-07-20 10:52:41.818293504 +0800
@@ -141,6 +141,7 @@
 #define _SPI_NAND_OP_READ_ID				0x9F	/* Read Manufacture ID and Device ID */
 #define _SPI_NAND_OP_BLOCK_ERASE			0xD8	/* Erase Block */
 #define _SPI_NAND_OP_RESET					0xFF	/* Reset */
+#define _SPI_NAND_OP_DIE_SELECT				0xC2	/* Die Select */
 
 /* SPI NAND register address of command set */
 #define _SPI_NAND_ADDR_PROTECTION			0xA0	/* Address of protection */
@@ -191,7 +192,7 @@
 #define _SPI_NAND_DEVICE_ID_F50L512M41A		0x20
 #define _SPI_NAND_DEVICE_ID_F50L1G41A0		0x21
 #define _SPI_NAND_DEVICE_ID_W25N01GV		0xAA
-#define _SPI_NAND_DEVICE_ID_W25N02GV        0xAB
+#define _SPI_NAND_DEVICE_ID_W25M02GV		0xAB
 #define _SPI_NAND_DEVICE_ID_MXIC35LF1GE4AB	0x12
 #define _SPI_NAND_DEVICE_ID_MXIC35LF2GE4AB	0x22
 #define _SPI_NAND_DEVICE_ID_MXIC35LF4GE4AB	0x32
@@ -254,9 +255,11 @@
 struct ra_nand_chip ra;
 struct nand_info flashInfo;
 unsigned char _plane_select_bit=0;
+unsigned char _die_id = 0;
 
 struct mtd_info 	*spi_nand_mtd;
 
+
 /* TYPE DECLARATIONS ----------------------------------------------------------------- */
 struct _SPI_NAND_FLASH_ID_T {
 	u8 mfr_id;
@@ -358,7 +361,7 @@
 		dummy_mode:					SPI_NAND_FLASH_READ_DUMMY_BYTE_APPEND,
 		read_mode:					SPI_NAND_FLASH_READ_SPEED_MODE_SINGLE,
 		oob_free_layout : 			&ooblayout_gigadevice_a,
-		plane_select:				SPI_NAND_FLASH_PLANE_SELECT_NONE,
+		feature:					SPI_NAND_FLASH_FEATURE_NONE,
 	},
 
 	{
@@ -372,7 +375,7 @@
 		dummy_mode:					SPI_NAND_FLASH_READ_DUMMY_BYTE_APPEND,
 		read_mode:					SPI_NAND_FLASH_READ_SPEED_MODE_SINGLE,
 		oob_free_layout : 			&ooblayout_gigadevice_b,
-		plane_select:				SPI_NAND_FLASH_PLANE_SELECT_NONE,
+		feature:					SPI_NAND_FLASH_FEATURE_NONE,
 	},
 
 	{
@@ -386,7 +389,7 @@
 		dummy_mode: 				SPI_NAND_FLASH_READ_DUMMY_BYTE_PREPEND,
 		read_mode:					SPI_NAND_FLASH_READ_SPEED_MODE_SINGLE,
 		oob_free_layout : 			&ooblayout_gigadevice_c,
-		plane_select:				SPI_NAND_FLASH_PLANE_SELECT_NONE,
+		feature:					SPI_NAND_FLASH_FEATURE_NONE,
 	},
 
 	{
@@ -400,7 +403,7 @@
 		dummy_mode:					SPI_NAND_FLASH_READ_DUMMY_BYTE_APPEND,
 		read_mode:					SPI_NAND_FLASH_READ_SPEED_MODE_SINGLE,
 		oob_free_layout : 			&ooblayout_gigadevice_b,
-		plane_select:				SPI_NAND_FLASH_PLANE_SELECT_NONE,
+		feature:					SPI_NAND_FLASH_FEATURE_NONE,
 	},		
 	
 	{
@@ -414,7 +417,7 @@
 		dummy_mode: 				SPI_NAND_FLASH_READ_DUMMY_BYTE_PREPEND,
 		read_mode:					SPI_NAND_FLASH_READ_SPEED_MODE_SINGLE,
 		oob_free_layout : 			&ooblayout_gigadevice_c,
-		plane_select:				SPI_NAND_FLASH_PLANE_SELECT_NONE,
+		feature:					SPI_NAND_FLASH_FEATURE_NONE,
 	},		
 				
 	{
@@ -428,7 +431,7 @@
 		dummy_mode:					SPI_NAND_FLASH_READ_DUMMY_BYTE_APPEND,
 		read_mode:					SPI_NAND_FLASH_READ_SPEED_MODE_SINGLE,
 		oob_free_layout : 			&ooblayout_esmt,
-		plane_select:				SPI_NAND_FLASH_PLANE_SELECT_NONE,
+		feature:					SPI_NAND_FLASH_FEATURE_NONE,
 	},
 	
 	{
@@ -442,7 +445,7 @@
 		dummy_mode:					SPI_NAND_FLASH_READ_DUMMY_BYTE_APPEND,
 		read_mode:					SPI_NAND_FLASH_READ_SPEED_MODE_SINGLE,
 		oob_free_layout : 			&ooblayout_esmt,
-		plane_select:				SPI_NAND_FLASH_PLANE_SELECT_NONE,
+		feature:					SPI_NAND_FLASH_FEATURE_NONE,
 	},
 	
 	{
@@ -456,13 +459,13 @@
 		dummy_mode:					SPI_NAND_FLASH_READ_DUMMY_BYTE_APPEND,
 		read_mode:					SPI_NAND_FLASH_READ_SPEED_MODE_SINGLE,
 		oob_free_layout : 			&ooblayout_winbond,
-		plane_select:				SPI_NAND_FLASH_PLANE_SELECT_NONE,
+		feature:					SPI_NAND_FLASH_FEATURE_NONE,
 	},
 
 	{
 		mfr_id: 					_SPI_NAND_MANUFACTURER_ID_WINBOND,
-		dev_id: 					_SPI_NAND_DEVICE_ID_W25N02GV,
-		ptr_name:					"_SPI_NAND_DEVICE_ID_W25N02G",		
+		dev_id: 					_SPI_NAND_DEVICE_ID_W25M02GV,
+		ptr_name:					"_SPI_NAND_DEVICE_ID_W25M02G",
 		device_size:				_SPI_NAND_CHIP_SIZE_2GBIT,
 		page_size:					_SPI_NAND_PAGE_SIZE_2KBYTE,
 		oob_size:					_SPI_NAND_OOB_SIZE_64BYTE,
@@ -470,7 +473,7 @@
 		dummy_mode: 				SPI_NAND_FLASH_READ_DUMMY_BYTE_APPEND,
 		read_mode:					SPI_NAND_FLASH_READ_SPEED_MODE_SINGLE,
 		oob_free_layout : 			&ooblayout_winbond,
-		plane_select:				SPI_NAND_FLASH_PLANE_SELECT_NONE,
+		feature:					SPI_NAND_FLASH_DIE_SELECT_HAVE,
 	},		
 	
 	{
@@ -484,7 +487,7 @@
 		dummy_mode:					SPI_NAND_FLASH_READ_DUMMY_BYTE_APPEND,
 		read_mode:					SPI_NAND_FLASH_READ_SPEED_MODE_SINGLE,
 		oob_free_layout : 			&ooblayout_mxic,
-		plane_select:				SPI_NAND_FLASH_PLANE_SELECT_NONE,
+		feature:					SPI_NAND_FLASH_FEATURE_NONE,
 	},
 
 	{
@@ -498,7 +501,7 @@
 		dummy_mode:					SPI_NAND_FLASH_READ_DUMMY_BYTE_APPEND,
 		read_mode:					SPI_NAND_FLASH_READ_SPEED_MODE_SINGLE,
 		oob_free_layout : 			&ooblayout_mxic,
-		plane_select:				SPI_NAND_FLASH_PLANE_SELECT_HAVE,
+		feature:					SPI_NAND_FLASH_PLANE_SELECT_HAVE,
 	},
 
 	{
@@ -512,7 +515,7 @@
 		dummy_mode: 				SPI_NAND_FLASH_READ_DUMMY_BYTE_APPEND,
 		read_mode:					SPI_NAND_FLASH_READ_SPEED_MODE_SINGLE,
 		oob_free_layout : 			&ooblayout_zentel,		
-		plane_select:				SPI_NAND_FLASH_PLANE_SELECT_NONE,
+		feature:					SPI_NAND_FLASH_FEATURE_NONE,
 	},
 	{
 		mfr_id: 					_SPI_NAND_MANUFACTURER_ID_ZENTEL,
@@ -525,7 +528,7 @@
 		dummy_mode: 				SPI_NAND_FLASH_READ_DUMMY_BYTE_APPEND,
 		read_mode:					SPI_NAND_FLASH_READ_SPEED_MODE_SINGLE,
 		oob_free_layout : 			&ooblayout_zentel,		
-		plane_select:				SPI_NAND_FLASH_PLANE_SELECT_NONE,
+		feature:					SPI_NAND_FLASH_FEATURE_NONE,
 	},	
 
 	{
@@ -539,7 +542,7 @@
 		dummy_mode:					SPI_NAND_FLASH_READ_DUMMY_BYTE_APPEND,
 		read_mode:					SPI_NAND_FLASH_READ_SPEED_MODE_SINGLE,
 		oob_free_layout : 			&ooblayout_etron,			
-		plane_select:				SPI_NAND_FLASH_PLANE_SELECT_NONE,
+		feature:					SPI_NAND_FLASH_FEATURE_NONE,
 	},
 	
 	{
@@ -553,7 +556,7 @@
 		dummy_mode: 				SPI_NAND_FLASH_READ_DUMMY_BYTE_APPEND,
 		read_mode:					SPI_NAND_FLASH_READ_SPEED_MODE_SINGLE,		
 		oob_free_layout :			&ooblayout_etron,		
-		plane_select:				SPI_NAND_FLASH_PLANE_SELECT_NONE,
+		feature:					SPI_NAND_FLASH_FEATURE_NONE,
 	},
 	
 	{
@@ -567,7 +570,7 @@
 		dummy_mode: 				SPI_NAND_FLASH_READ_DUMMY_BYTE_APPEND,
 		read_mode:					SPI_NAND_FLASH_READ_SPEED_MODE_SINGLE,		
 		oob_free_layout : 			&ooblayout_toshiba,		
-		plane_select:				SPI_NAND_FLASH_PLANE_SELECT_NONE,
+		feature:					SPI_NAND_FLASH_FEATURE_NONE,
 	},		
 
 	{
@@ -581,7 +584,7 @@
 		dummy_mode: 				SPI_NAND_FLASH_READ_DUMMY_BYTE_APPEND,
 		read_mode:					SPI_NAND_FLASH_READ_SPEED_MODE_SINGLE,		
 		oob_free_layout : 			&ooblayout_toshiba,		
-		plane_select:				SPI_NAND_FLASH_PLANE_SELECT_NONE,
+		feature:					SPI_NAND_FLASH_FEATURE_NONE,
 	}, 
 
 	{
@@ -595,7 +598,7 @@
 		dummy_mode: 				SPI_NAND_FLASH_READ_DUMMY_BYTE_APPEND,
 		read_mode:					SPI_NAND_FLASH_READ_SPEED_MODE_SINGLE,		
 		oob_free_layout :			&ooblayout_micron, 	
-		plane_select:				SPI_NAND_FLASH_PLANE_SELECT_NONE,
+		feature:					SPI_NAND_FLASH_FEATURE_NONE,
 	}	
 	
 };
@@ -668,7 +671,26 @@
 
 }
 
+static SPI_NAND_FLASH_RTN_T spi_nand_protocol_die_select( u8 die_id)
+{
+	SPI_NAND_FLASH_RTN_T	rtn_status = SPI_NAND_FLASH_RTN_NO_ERROR;
+
+	/* 1. Chip Select low */
+	_SPI_NAND_READ_CHIP_SELECT_LOW();
+
+	/* 2. Send C2h opcode (Die Select) */
+	_SPI_NAND_WRITE_ONE_BYTE( _SPI_NAND_OP_DIE_SELECT );
+
+	/* 3. Send Die ID */
+	_SPI_NAND_WRITE_ONE_BYTE( die_id );
+
+	/* 5. Chip Select High */
+	_SPI_NAND_READ_CHIP_SELECT_HIGH();
+
+	_SPI_NAND_DEBUG_PRINTF(SPI_NAND_FLASH_DEBUG_LEVEL_1, "spi_nand_protocol_die_select\n");
 
+	return (rtn_status);
+}
 
 static SPI_NAND_FLASH_RTN_T spi_nand_protocol_reset( void )
 {
@@ -1182,7 +1204,7 @@
 	}
 	
 	
-	if( ((ptr_dev_info_t->plane_select) == SPI_NAND_FLASH_PLANE_SELECT_HAVE) )
+	if( ((ptr_dev_info_t->feature) & SPI_NAND_FLASH_PLANE_SELECT_HAVE) )
 	{
 		if( _plane_select_bit == 0)
 		{
@@ -1260,7 +1282,7 @@
 		_SPI_NAND_WRITE_ONE_BYTE( (0xff) );						/* dummy byte */
 	}	
 	
-	if( ((ptr_dev_info_t->plane_select) == SPI_NAND_FLASH_PLANE_SELECT_HAVE) )
+	if( ((ptr_dev_info_t->feature) & SPI_NAND_FLASH_PLANE_SELECT_HAVE) )
 	{
 		if( _plane_select_bit == 0)
 		{
@@ -1333,22 +1355,22 @@
 	{
 		_SPI_NAND_WRITE_ONE_BYTE( (0xff) );						/* dummy byte */
 	}		
-	if( ((ptr_dev_info_t->plane_select) == SPI_NAND_FLASH_PLANE_SELECT_HAVE) )
 
-{
-		if( _plane_select_bit == 0)
+	if( ((ptr_dev_info_t->feature) & SPI_NAND_FLASH_PLANE_SELECT_HAVE) )
 	{
+		if( _plane_select_bit == 0)
+		{
 			_SPI_NAND_WRITE_ONE_BYTE( ((data_offset >> 8 ) &(0xef)) );
-	}
+		}
 		if( _plane_select_bit == 1)
+		{
+			_SPI_NAND_WRITE_ONE_BYTE( ((data_offset >> 8 ) | (0x10)) );
+		}
+	}
+	else
 	{
-		_SPI_NAND_WRITE_ONE_BYTE( ((data_offset >> 8 ) | (0x10)) );
-	}				
-}	
-else
-{
 		_SPI_NAND_WRITE_ONE_BYTE( ((data_offset >> 8 ) &(0xff)) );
-}
+	}
 	_SPI_NAND_WRITE_ONE_BYTE( ((data_offset      ) &(0xff)) );
 		_SPI_NAND_WRITE_ONE_BYTE( (0xff) );						/* dummy byte */
 	
@@ -1404,7 +1426,7 @@
 	_SPI_NAND_WRITE_ONE_BYTE( _SPI_NAND_OP_PROGRAM_LOAD_SINGLE );
 	
 	/* 3. Send address offset */
-	if( ((ptr_dev_info_t->plane_select) == SPI_NAND_FLASH_PLANE_SELECT_HAVE) )
+	if( ((ptr_dev_info_t->feature) & SPI_NAND_FLASH_PLANE_SELECT_HAVE) )
 	{
 		if( _plane_select_bit == 0)
 		{
@@ -1471,7 +1493,7 @@
 	_SPI_NAND_WRITE_ONE_BYTE( _SPI_NAND_OP_PROGRAM_LOAD_QUAD );
 	
 	/* 3. Send address offset */
-	if( ((ptr_dev_info_t->plane_select) == SPI_NAND_FLASH_PLANE_SELECT_HAVE)  )
+	if( ((ptr_dev_info_t->feature) & SPI_NAND_FLASH_PLANE_SELECT_HAVE)  )
 	{
 		if( _plane_select_bit == 0)
 		{
@@ -1639,7 +1661,26 @@
 	return (rtn_status);
 }
 
+static void spi_nand_select_die ( u32 page_number )
+{
+	struct SPI_NAND_FLASH_INFO_T *ptr_dev_info_t;
+	u8 die_id = 0;
+
+	ptr_dev_info_t = _SPI_NAND_GET_DEVICE_INFO_PTR;
 
+	if(((ptr_dev_info_t->feature) & SPI_NAND_FLASH_DIE_SELECT_HAVE))
+	{
+		die_id = ((page_number >> 16) & 0xff);
+
+		if (_die_id != die_id)
+		{
+			_die_id = die_id;
+			spi_nand_protocol_die_select(die_id);
+
+			_SPI_NAND_DEBUG_PRINTF(SPI_NAND_FLASH_DEBUG_LEVEL_2, "spi_nand_protocol_die_select: die_id=0x%x\n", die_id);
+		}
+	}
+}
 
 static SPI_NAND_FLASH_RTN_T ecc_fail_check( u32 page_number )
 {
@@ -1810,6 +1851,8 @@
 	}
 	else
 	{
+		spi_nand_select_die ( page_number );
+
 		spi_nand_protocol_page_read ( page_number );
 		
 		/*  Checking status for load page/erase/program complete */
@@ -1879,6 +1922,8 @@
 	u8						status;
 	SPI_NAND_FLASH_RTN_T	rtn_status	= SPI_NAND_FLASH_RTN_NO_ERROR;
 
+	spi_nand_select_die ( (block_index << _SPI_NAND_BLOCK_ROW_ADDRESS_OFFSET) );
+
 	/* 2.2 Enable write_to flash */
 	spi_nand_protocol_write_enable();		
 
@@ -2032,14 +2077,15 @@
 	/* 2. Read whole data from cache of NAND Flash Chip */
 	_SPI_NAND_DEBUG_PRINTF(SPI_NAND_FLASH_DEBUG_LEVEL_1, "spi_nand_read_page: curren_page_num=0x%x, page_number=0x%x\n", _current_page_num, page_number);
 
-	if( (rtn_status==SPI_NAND_FLASH_RTN_NO_ERROR) && (_current_page_num != page_number) )
+	/* No matter what status, we must read the cache data to dram */
+	if( (_current_page_num != page_number) )
 	{
 		memset(_current_cache_page, 0x0, sizeof(_current_cache_page)); 		
 		
 		_SPI_NAND_DEBUG_PRINTF(SPI_NAND_FLASH_DEBUG_LEVEL_2, "spi_nand_read_page: before read, _current_cache_page:\n");
 		_SPI_NAND_DEBUG_PRINTF_ARRAY(SPI_NAND_FLASH_DEBUG_LEVEL_2, &_current_cache_page[0], _SPI_NAND_CACHE_SIZE);
 		
-		if( ((ptr_dev_info_t->plane_select) == SPI_NAND_FLASH_PLANE_SELECT_HAVE) )
+		if( ((ptr_dev_info_t->feature) & SPI_NAND_FLASH_PLANE_SELECT_HAVE) )
 		{
 			_plane_select_bit = ((page_number >> 6)& (0x1));
 
@@ -2152,7 +2198,7 @@
 		_SPI_NAND_DEBUG_PRINTF(SPI_NAND_FLASH_DEBUG_LEVEL_2, "spi_nand_write_page: data_offset=0x%x, date_len=0x%x, oob_offset=0x%x, oob_len=0x%x\n", data_offset, data_len, oob_offset, oob_len);
 		_SPI_NAND_DEBUG_PRINTF_ARRAY(SPI_NAND_FLASH_DEBUG_LEVEL_2, &_current_cache_page[0], ((ptr_dev_info_t->page_size) + (ptr_dev_info_t->oob_size)));		
 	
-		if( ((ptr_dev_info_t->plane_select) == SPI_NAND_FLASH_PLANE_SELECT_HAVE)  )
+		if( ((ptr_dev_info_t->feature) & SPI_NAND_FLASH_PLANE_SELECT_HAVE)  )
 		{
 			_plane_select_bit = ((page_number >> 6) & (0x1));
 
@@ -2160,7 +2206,9 @@
 
 		}
 
-		/* Different Manafacture have different prgoram flow and setting */		
+		spi_nand_select_die ( page_number );
+
+		/* Different Manafacture have different prgoram flow and setting */
 
 		if( ((ptr_dev_info_t->mfr_id) == _SPI_NAND_MANUFACTURER_ID_MXIC ) || \
 			((ptr_dev_info_t->mfr_id) == _SPI_NAND_MANUFACTURER_ID_WINBOND ) || \
@@ -2680,6 +2728,28 @@
 		spi_nand_protocol_set_status_reg_2(feature);	
 
 		spi_nand_protocol_get_status_reg_1(&feature);
+
+		/* Unlock all block for Die_1 */
+		if(((ptr_device_t->feature) & SPI_NAND_FLASH_DIE_SELECT_HAVE))
+		{
+			_die_id = 0x01;
+			spi_nand_protocol_die_select(_die_id);
+
+			/* Enable to modify the status regsiter 1 */
+			feature = 0x58;
+			spi_nand_protocol_set_status_reg_2(feature);
+
+			/* Unlock all block and Enable Qual mode */
+			feature = 0x81;
+			spi_nand_protocol_set_status_reg_1(feature);
+
+			/* Disable to modify the status regsiter 1 */
+			feature = 0x18;
+			spi_nand_protocol_set_status_reg_2(feature);
+
+			spi_nand_protocol_get_status_reg_1(&feature);
+		}
+
 		_SPI_NAND_DEBUG_PRINTF(SPI_NAND_FLASH_DEBUG_LEVEL_1, "After Unlock all block setup, the status register1 =0x%x\n", feature);					
 	}
 	else if( (ptr_device_t->mfr_id) == _SPI_NAND_MANUFACTURER_ID_ESMT)
@@ -2815,7 +2885,7 @@
 			ptr_rtn_device_t->read_mode	  = spi_nand_flash_tables[i].read_mode;
 			memcpy( &(ptr_rtn_device_t->ptr_name) , &(spi_nand_flash_tables[i].ptr_name), sizeof(ptr_rtn_device_t->ptr_name));
 			memcpy( &(ptr_rtn_device_t->oob_free_layout) , &(spi_nand_flash_tables[i].oob_free_layout), sizeof(ptr_rtn_device_t->oob_free_layout));
-			ptr_rtn_device_t->plane_select = spi_nand_flash_tables[i].plane_select;
+			ptr_rtn_device_t->feature = spi_nand_flash_tables[i].feature;
 			
 			rtn_status = SPI_NAND_FLASH_RTN_NO_ERROR;
 			break;
@@ -2846,7 +2916,7 @@
 				ptr_rtn_device_t->read_mode	  = spi_nand_flash_tables[i].read_mode;
 				memcpy( &(ptr_rtn_device_t->ptr_name) , &(spi_nand_flash_tables[i].ptr_name), sizeof(ptr_rtn_device_t->ptr_name));
 				memcpy( &(ptr_rtn_device_t->oob_free_layout) , &(spi_nand_flash_tables[i].oob_free_layout), sizeof(ptr_rtn_device_t->oob_free_layout));
-				ptr_rtn_device_t->plane_select = spi_nand_flash_tables[i].plane_select;
+				ptr_rtn_device_t->feature = spi_nand_flash_tables[i].feature;
 				
 				rtn_status = SPI_NAND_FLASH_RTN_NO_ERROR;
 				break;
Index: linux-2.6.36/drivers/mtd/chips/spi_nand_flash.h
===================================================================
--- linux-2.6.36.orig/drivers/mtd/chips/spi_nand_flash.h	2016-07-20 10:43:48.295613460 +0800
+++ linux-2.6.36/drivers/mtd/chips/spi_nand_flash.h	2016-07-20 10:48:17.281022094 +0800
@@ -97,6 +97,7 @@
 	SPI_NAND_FLASH_DEBUG_LEVEL_DEF_NO	
 } SPI_NAND_FLASH_DEBUG_LEVEL_T;
 
+#if 0
 typedef enum{
 	SPI_NAND_FLASH_PLANE_SELECT_NONE =0,
 	SPI_NAND_FLASH_PLANE_SELECT_HAVE,
@@ -104,6 +105,12 @@
 	SPI_NAND_FLASH_PLANE_SELECT_DEF_NO
 	
 } SPI_NAND_FLASH_PLANE_SELECT_T;
+#endif
+
+/* Bitwise */
+#define SPI_NAND_FLASH_FEATURE_NONE			( 0x00 )
+#define SPI_NAND_FLASH_PLANE_SELECT_HAVE	( 0x01 )
+#define SPI_NAND_FLASH_DIE_SELECT_HAVE		( 0x01 << 1 )
 
 struct spi_nand_flash_oobfree{
 	unsigned long	offset;
@@ -127,7 +134,10 @@
 	SPI_NAND_FLASH_READ_DUMMY_BYTE_T	dummy_mode;
 	u32   								read_mode;
 	struct spi_nand_flash_ooblayout		*oob_free_layout;
+	u32									feature;
+#if 0
 	SPI_NAND_FLASH_PLANE_SELECT_T       plane_select;
+#endif
 };
 
 struct nand_info {
