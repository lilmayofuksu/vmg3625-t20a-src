Index: linux-2.6.36/drivers/net/ppp_generic.c
===================================================================
--- linux-2.6.36.orig/drivers/net/ppp_generic.c	2018-04-03 09:51:47.272666575 +0800
+++ linux-2.6.36/drivers/net/ppp_generic.c	2018-04-03 10:01:23.394178300 +0800
@@ -1134,6 +1134,20 @@
 	struct sk_buff *new_skb;
 	int len;
 	unsigned char *cp;
+#if 1
+	int timestamp = 1;
+
+	if (proto == PPP_IP || proto == PPP_IPV6) {
+        if (ppp->debug)
+            printk(KERN_DEBUG "%s:%d skb->dev->name:%s  skb->original_dev->name:%s", __FUNCTION__, __LINE__, skb->dev->name, skb->original_dev->name);
+        /*
+        * only record timestamp when tx packet is from LAN.
+        * and if packet is from LAN, original_dev->name will be br0, br1, etc..., otherwise null.
+        */
+		timestamp = (skb->original_dev->name != NULL) ? 1 : 0;
+	}
+#endif
+
 
 	if (proto < 0x8000) {
 #ifdef CONFIG_PPP_FILTER
@@ -1153,10 +1167,16 @@
 		if (!(ppp->active_filter &&
 		      sk_run_filter(skb, ppp->active_filter,
 				    ppp->active_len) == 0))
+    #if 1
+	        if (timestamp)
+    #endif
 			ppp->last_xmit = jiffies;
 		skb_pull(skb, 2);
 #else
 		/* for data packets, record the time */
+    #if 1
+        if (timestamp)
+    #endif
 		ppp->last_xmit = jiffies;
 #endif /* CONFIG_PPP_FILTER */
 	}
@@ -1225,6 +1245,10 @@
 	if (ppp->flags & SC_LOOP_TRAFFIC) {
 		if (ppp->file.rq.qlen > PPP_MAX_RQLEN)
 			goto drop;
+    #if 1
+        if (!timestamp)
+            goto drop;
+    #endif
 		skb_queue_tail(&ppp->file.rq, skb);
 		wake_up_interruptible(&ppp->file.rwait);
 		return;
@@ -1659,11 +1683,31 @@
 		slhc_toss(ppp->vj);
 }
 
+#if 1
+static int
+ppp_rx_filter(char *data)
+{
+    struct iphdr *encap;
+
+    encap = (struct iphdr *)(data + 2);
+    /* Multicast */
+    if (ipv4_is_multicast(encap->daddr) && !ipv4_is_local_multicast(encap->daddr))
+        return 1;
+
+    return 0;
+}
+#endif
+
 static void
 ppp_receive_nonmp_frame(struct ppp *ppp, struct sk_buff *skb)
 {
 	struct sk_buff *ns;
 	int proto, len, npi;
+#if 1
+	struct sk_buff *tmp;
+	int timestamp = 0;
+	unsigned char *data;
+#endif	
 
 	/*
 	 * Decompress the frame, if compressed.
@@ -1678,6 +1722,13 @@
 		goto err;
 
 	proto = PPP_PROTO(skb);
+
+#if 1
+    if (proto == PPP_IP) {
+		data = skb->data;
+		timestamp = ppp_rx_filter(data);
+	}
+#endif	
 	switch (proto) {
 	case PPP_VJC_COMP:
 		/* decompress VJ compressed packets */
@@ -1751,13 +1802,40 @@
 	} else {
 		/* network protocol frame - give it to the kernel */
 
+#if 1
+    #ifdef CONFIG_PPP_FILTER
+        /* check if the packet passes the pass and active filters */
+        /* the filter instructions are constructed assuming
+           a four-byte PPP header on each packet */
+		if (skb_headroom(skb) < 2) {
+            tmp = alloc_skb(skb->len+2,GFP_ATOMIC); 
+            skb_reserve(tmp, 2); 
+            memcpy(skb_put(tmp, skb->len), skb->data, skb->len); 
+            kfree_skb(skb); 
+            skb = tmp; 
+        } 
+        *skb_push(skb, 2) = 0;
+        if (ppp->pass_filter && sk_run_filter(skb, ppp->pass_filter, ppp->active_len) == 0) {
+            if (ppp->debug & 1)
+                printk(KERN_DEBUG "PPP: inbound frame not passed\n");
+            kfree_skb(skb);
+            return;
+        }
+        if (!(ppp->active_filter && sk_run_filter(skb, ppp->active_filter, ppp->active_len) == 0))
+            if (timestamp)
+                ppp->last_recv = jiffies;
+        skb_pull(skb, 2);
+    #else
+        if (timestamp)
+            ppp->last_recv = jiffies;
+    #endif /* CONFIG_PPP_FILTER */
+#else
 #ifdef CONFIG_PPP_FILTER
 		/* check if the packet passes the pass and active filters */
 		/* the filter instructions are constructed assuming
 		   a four-byte PPP header on each packet */
 		if (ppp->pass_filter || ppp->active_filter) {
-			if (skb_cloned(skb) &&
-			    pskb_expand_head(skb, 0, 0, GFP_ATOMIC))
+			if (skb_cloned(skb) && pskb_expand_head(skb, 0, 0, GFP_ATOMIC))
 				goto err;
 
 			*skb_push(skb, 2) = 0;
@@ -1778,6 +1856,7 @@
 		} else
 #endif /* CONFIG_PPP_FILTER */
 			ppp->last_recv = jiffies;
+#endif
 
 		if ((ppp->dev->flags & IFF_UP) == 0 ||
 		    ppp->npmode[npi] != NPMODE_PASS) {
